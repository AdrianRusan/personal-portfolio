# Task Implementation Rules

This rule applies when implementing tasks from tasks.json v1 tag. Use alongside the main .cursorrules file.

## Task Implementation Workflow

### Pre-Implementation
1. Read the specific task from tasks.json v1 tag
2. Reference PRD-Portfolio-NextJS-Vercel.md for detailed requirements
3. Check existing codebase for similar patterns using @file and @folder
4. Identify dependencies and subtasks
5. Plan the implementation approach

### Implementation Standards
- Follow Test-Driven Development (TDD) mindset for complex logic
- Write tests before implementing complex features
- Use @code to reference existing patterns when implementing similar functionality
- Implement Server Actions for all form submissions and data mutations
- Use PayloadCMS 3.0 Local API with getPayload() pattern for all CMS operations

### PayloadCMS 3.0 Specific Rules
- Use `getPayload()` from 'payload' for all Local API operations
- Import config from '@/payload.config' for getPayload calls
- Use Lexical editor instead of Slate for rich text
- Configure collections in separate files in src/collections/
- Use `@payloadcms/richtext-lexical` for rich text serialization
- Leverage built-in job queue for background tasks

### Code Quality Checklist
- All new code must be TypeScript with strict typing
- No `any` types unless absolutely necessary and documented
- All functions must have proper error handling with Sentry logging
- All API routes must include input validation with Zod
- All images must use next/image with proper attributes

### Server Actions Pattern (Updated for Payload 3.0)
```typescript
'use server'

import { getPayload } from 'payload'
import config from '@/payload.config'
import { revalidatePath } from 'next/cache'

export async function createProject(data: ProjectInput) {
  try {
    const payload = await getPayload({ config })
    
    const result = await payload.create({
      collection: 'projects',
      data: {
        ...data,
        slug: slugify(data.title),
        status: 'draft'
      }
    })
    
    revalidatePath('/projects')
    return { success: true, data: result }
  } catch (error) {
    Sentry.captureException(error, {
      tags: { operation: 'create-project' },
      extra: { data }
    })
    return { success: false, error: error.message }
  }
}
```

### Data Fetching Pattern (Updated for Payload 3.0)
```typescript
import { getPayload } from 'payload'
import config from '@/payload.config'

export async function getProjects() {
  try {
    const payload = await getPayload({ config })
    
    const projects = await payload.find({
      collection: 'projects',
      where: { status: { equals: 'published' } },
      sort: '-createdAt',
      limit: 10
    })
    return projects.docs
  } catch (error) {
    Sentry.captureException(error)
    return []
  }
}
```

### Rich Text Rendering (Updated for Lexical)
```typescript
import { serializeLexical } from '@payloadcms/richtext-lexical'

export function RichTextRenderer({ content }: { content: any }) {
  return (
    <div className="prose prose-lg max-w-none">
      {serializeLexical({ nodes: content })}
    </div>
  )
}
```

### Testing Requirements
- Unit tests for utility functions and business logic (Jest)
- E2E tests for critical user flows (Playwright)
- Manual testing across browsers and devices
- Lighthouse score validation (90+ required)

### Email Integration (Resend Primary)
- Use Resend SDK for all email operations
- Create React Email templates for transactional emails
- Always wrap email operations in try-catch blocks
- Log email failures to Sentry with context

### Final Deliverable Checklist
- [ ] Code implements all task requirements
- [ ] Tests cover new functionality
- [ ] Documentation updated if needed
- [ ] Build passes without errors (`npm run build`)
- [ ] ESLint and Prettier checks pass
- [ ] Sentry error logging implemented
- [ ] Performance requirements met (Lighthouse 90+)
- [ ] Accessibility requirements met
- [ ] PayloadCMS 3.0 patterns followed correctly
- [ ] Ready for deployment to Vercel

### Error Handling Pattern
```typescript
try {
  // PayloadCMS 3.0 operation
  const payload = await getPayload({ config })
  const result = await payload.create({
    collection: 'projects',
    data: validatedData
  })
} catch (error) {
  Sentry.captureException(error, {
    tags: { 
      operation: 'payload-create',
      collection: 'projects'
    },
    extra: { data: validatedData }
  })
  throw new Error('Failed to create project')
}
```

### Performance Considerations
- Use Next.js ISR for dynamic content
- Implement proper caching strategies
- Use PayloadCMS 3.0's select fields for performance
- Optimize images with next/image
- Minimize client-side JavaScript

### Security Best Practices
- Validate all inputs with Zod schemas
- Use PayloadCMS 3.0's built-in access control
- Sanitize rich text content when necessary
- Never expose sensitive data in client-side code
- Implement proper CORS settings

### Documentation Requirements
- Update README if new features are added
- Document new API endpoints
- Include setup instructions for new integrations
- Document environment variables needed

### Git Workflow
- Create feature branches for each task
- Commit frequently with clear messages
- Create Pull Requests for review
- Include task ID in commit messages
- Test thoroughly before merging 