# Task Implementation Rules

This rule applies when implementing tasks from tasks.json v1 tag. Use alongside the main .cursorrules file.

## Task Implementation Workflow

### Pre-Implementation
1. Read the specific task from tasks.json v1 tag
2. Reference PRD-Portfolio-NextJS-Vercel.md for detailed requirements
3. Check existing codebase for similar patterns using @file and @folder
4. Identify dependencies and subtasks
5. Plan the implementation approach

### Implementation Standards
- Follow Test-Driven Development (TDD) mindset for complex logic
- Write tests before implementing complex features
- Use @code to reference existing patterns when implementing similar functionality
- Implement Server Actions for all form submissions and data mutations

### Code Quality Checklist
- All new code must be TypeScript with strict typing
- No `any` types unless absolutely necessary and documented
- All functions must have proper error handling with Sentry logging
- All API routes must include input validation with Zod
- All images must use next/image with proper attributes

### Testing Requirements
- Unit tests for utility functions and business logic (Jest)
- E2E tests for critical user flows (Playwright)
- Manual testing across browsers and devices
- Lighthouse score validation (90+ required)

### Email Integration (Resend Primary)
- Use Resend SDK for all email operations
- Create React Email templates for transactional emails
- Always wrap email operations in try-catch blocks
- Log email failures to Sentry with context

### Final Deliverable Checklist
- [ ] Code implements all task requirements
- [ ] Tests cover new functionality
- [ ] Documentation updated if needed
- [ ] Build passes without errors (`npm run build`)
- [ ] ESLint and Prettier checks pass
- [ ] Sentry error logging implemented
- [ ] Performance requirements met (Lighthouse 90+)
- [ ] Accessibility requirements met
- [ ] Ready for deployment to Vercel

### Performance Considerations
- Use Next.js ISR for dynamic content
- Implement proper caching strategies
- Optimize images with next/image
- Minimize client-side JavaScript

### Security Best Practices
- Validate all inputs with Zod schemas
- Sanitize rich text content when necessary
- Never expose sensitive data in client-side code
- Implement proper CORS settings

### Documentation Requirements
- Update README if new features are added
- Document new API endpoints
- Include setup instructions for new integrations
- Document environment variables needed

### Git Workflow
- Create feature branches for each task
- Commit frequently with clear messages
- Create Pull Requests for review
- Include task ID in commit messages
- Test thoroughly before merging 